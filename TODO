## Security
- TODO: Check whether we need CSRF protection
  - if so, find a new package as `csurf` is deprecated 
  > This npm module is currently deprecated due to the large influx of security vulunerability reports received, most of which are simply exploiting the underlying limitations of CSRF itself. The Express.js project does not have the resources to put into this module, which is largely unnecessary for modern SPA-based applications.
- TODO: Check SQL injection not possible
- TODO: Check the submit and matches endpoints are secure
- NOTE: Warning about dependencies on vulnerable packages in `npm audit`
- MAYBE: Add hashing for fbids
  - though not really sensitive information since application-scoped?

## Before production
- TODO: Build actual tests
- MAYBE: Better client-side error handling / console logging

## Database
- TODO store people's MS emails for notifications
- TODO store match history

## Features
### Notifications
- TODO: email B when A matches with them, and/or prevent people submitting on same person multiple times too soon
  - https://developers.facebook.com/docs/facebook-login/guides/map-users/ 
  - https://developers.facebook.com/docs/messenger-platform/getting-started/quick-start 
1. Set up webhooks on the new reciprocity-messaging app (use the request format from the sample app). We mainly need the optins one?
2. Set up basic messaging functionality to get through App Review
3. POST to '/webhook' route when a new match happens, with the name of the match and the user's app-scoped ID (ASID)
4. Swap the ASID for a page-scoped ID (PSID), and then notify them with MessengerApi.
  a. This is the [second use case here](https://developers.facebook.com/docs/messenger-platform/identity/id-matching/#given-a-user-id-for-an-app--retrieve-the-ids-for-bots-in-messenger-owned-by-the-same-business)
5. (Maybe?) Add a prompt to collect PSIDs when the user logs in. Possibly, we need to get them to actually send a message.
  a. The FB SDK login [here](https://medium.com/@sumindaniro/send-updates-or-messages-to-users-via-facebook-messenger-69e4e46ecce8) might be useful?
  b. https://developers.facebook.com/docs/messenger-platform/discovery/send-to-messenger-plugin. We could provide the ASID as `ref`, and then I think that some sort of webhook gets called to give us PSID.
  c. Ooh or we could use the [checkbox plugin](https://developers.facebook.com/docs/messenger-platform/reference/web-plugins).
  I think with that one, you provide the `user_ref` you want, and we could just use ASID? (No need for PSIDs at all, I think?)
    - Note that "This parameter should be unique not just for every person, but for every time the plugin is rendered.". So we'd
    need to augment ASID with datetime info, or something.

### Other
- TODO: reminder when X friends have signed up
- TODO: deal with when people remove each other as friends on FB
- MAYBE: After someone's created an account, they don't really need to log in using their MSID -
  maybe there's a quicker flow with only FB auth?
- MAYBE: it's a bit confusing for users that they get logged in immediately
  (also if they have multiple accounts logged in how does OAuth choose?)

## Code tidiness
- TODO: file structure, use of controllers, auth routers (e.g. auth/index.js)

### Facebook login
- TODO: deal with when user deauthorises app, maybe also deauthorise when they delete account (if technically possible)
- https://developers.facebook.com/devpolicy/#login
> If your app uses a manual Facebook Login flow (i.e. if your app is not using our SDKs to enable Facebook Login), check the validity of the session every 24 hours and log users out if it is no longer valid. Our SDKs perform this check automatically.
```javascript
const validateFacebookSession = async (req, res, next) => {
  const now = new Date();
  if (req.user && req.user.lastChecked) {
    const lastChecked = new Date(req.user.lastChecked);
    const hoursSinceLastCheck = Math.abs(now - lastChecked) / 36e5; // Convert difference to hours

    if (hoursSinceLastCheck > 24) {
      // Need to validate session with Facebook
      const appToken = 'YOUR_APP_ACCESS_TOKEN'; // You need to obtain this from your Facebook app settings
      const userToken = req.user.facebookAccessToken; // The token you stored when the user logged in
      const response = await fetch(`https://graph.facebook.com/debug_token?input_token=${userToken}&access_token=${appToken}`);
      const data = await response.json();

      if (!data.data.is_valid) {
        // Token is not valid, log user out
        req.logout(); // Using Passport's logout method
        return res.redirect('/login'); // Redirect to login page
      }

      // If valid, update the lastChecked timestamp
      req.user.lastChecked = new Date();
    }
  }

  next();
};

// Use this middleware for routes that require an authenticated session
app.use(validateFacebookSession);
```