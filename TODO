## Security
- TODO: Add hashing for ids
  - though not really sensitive information since application-scoped?
- TODO: Find another csrf package 
- TODO: Check SQL injection not possible
- TODO: Enable HTTPS
- MAYBE: After someone's created an account, they don't really need to log in using their MSID -
  maybe there's a quicker flow with only FB auth?
- TODO: check the submit and matches endpoints are secure
### Facebook login
- https://developers.facebook.com/devpolicy/#login
> If your app uses a manual Facebook Login flow (i.e. if your app is not using our SDKs to enable Facebook Login), check the validity of the session every 24 hours and log users out if it is no longer valid. Our SDKs perform this check automatically.
```javascript
const validateFacebookSession = async (req, res, next) => {
  const now = new Date();
  if (req.user && req.user.lastChecked) {
    const lastChecked = new Date(req.user.lastChecked);
    const hoursSinceLastCheck = Math.abs(now - lastChecked) / 36e5; // Convert difference to hours

    if (hoursSinceLastCheck > 24) {
      // Need to validate session with Facebook
      const appToken = 'YOUR_APP_ACCESS_TOKEN'; // You need to obtain this from your Facebook app settings
      const userToken = req.user.facebookAccessToken; // The token you stored when the user logged in
      const response = await fetch(`https://graph.facebook.com/debug_token?input_token=${userToken}&access_token=${appToken}`);
      const data = await response.json();

      if (!data.data.is_valid) {
        // Token is not valid, log user out
        req.logout(); // Using Passport's logout method
        return res.redirect('/login'); // Redirect to login page
      }

      // If valid, update the lastChecked timestamp
      req.user.lastChecked = new Date();
    }
  }

  next();
};

// Use this middleware for routes that require an authenticated session
app.use(validateFacebookSession);
```


## UI
- TODO: Build logic to get names+profile pictures(+profile urls?) from Facebook
- TODO: Build UI (post-auth flow)

## Before production
- TODO: add the non-development redirect URIs to: .env, auth/*.js files, in applications
  - for MS, in authentication > redirect URIs
  - for FB, in use cases > customise > settings
- TODO: Build actual tests

## Features
- TODO: reminder when X friends have signed up
- TODO: only display one match at a time
  - We should make sure that both A and B are presented with that match

## Code tidiness
- TODO: file structure, use of controllers, auth routers (e.g. auth/index.js)

## resetting database
MATCH(n)
DETACH DELETE n;
CREATE (:User {fbid: "123456789", name: "John Doe"})
CREATE (:User {fbid: "987654321", name: "Jane Roe"})

MATCH (a:User {fbid: "876336624537422"}), (b:User)
WHERE b.fbid IN ["123456789", "987654321"]
MERGE (a)-[rOut:FRIENDS]->(b)
  ON CREATE SET rOut.r1 = False, rOut.r2 = False, rOut.r3 = False
MERGE (a)<-[rInv:FRIENDS]-(b)
  ON CREATE SET rInv.r1 = False, rInv.r2 = False, rInv.r3 = False

MATCH (a)-[rel:FRIENDS]-(b)
WHERE a.fbid = "123456789" AND b.fbid = "876336624537422"
SET rel.r1 = true, rel.r2 = true;
MATCH (a)-[rel:FRIENDS]-(b)
WHERE a.fbid = "987654321" AND b.fbid = "876336624537422"
SET rel.r3 = true, rel.r2 = true;

MATCH (user:User {fbid: "876336624537422"})
SET user.lastMatchUpdate = "1970-01-01T00:00:00.000Z"